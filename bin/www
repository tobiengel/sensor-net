#!/usr/bin/node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('sensornet:server');
var http = require('http');
var https = require('https');
var fs = require('fs');
var models = require('../models');
//var private_file = __dirname + '/../ssl/automation.home.key';
//var cert_file = __dirname + '/../ssl/automation.home.crt';



var options = {

	//key: fs.readFileSync(private_file),
    //cert: fs.readFileSync(cert_file),
    //requestCert: false,
    //rejectUnauthorized: false
};

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
//app.set('port', port);
app.set('port', port);
var server;
models.sequelize.sync().then(function() {
	/**
	 * Create HTTP server.
	 */

	server = http.createServer(options, app).listen(port);

	/**
	 * Listen on provided port, on all network interfaces.
	 */

	//server.listen(port);
	server.on('error', onError);
	server.on('listening', onListening);
});

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
